// Line 23 is created by Bassam Nabriss. The following copyright notice applies to code on line 23, and line 23 only:

//MIT License
//Copyright(c) 2018 Bassam Nabriss
//Permission is hereby granted, free of charge, to any person obtaining a copy
//of this software and associated documentation files(the "Software"), to deal
//    in the Software without restriction, including without limitation the rights
//to use, copy, modify, merge, publish, distribute, sublicense, and / or sell
//copies of the Software, and to permit persons to whom the Software is
//furnished to do so, subject to the following conditions:

//The above copyright notice and this permission notice shall be included in all
//copies or substantial portions of the Software.

//THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
//IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
//    FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.IN NO EVENT SHALL THE
//AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
//LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
//    OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
//SOFTWARE.

var Validator = function () { function t(t, e) { e = void 0 === e ? {} : e, e = $.extend({ parentSelector: ".form-group", feedbackSelector: ".form-control-feedback", inputSuccessClass: "is-valid", inputErrorClass: "is-invalid", feedbackSuccessClass: "valid-feedback", feedbackErrorClass: "invalid-feedback", parentErrorClass: "has-error", parentWarningClass: "has-warning", parentSuccessClass: "has-success", rules: "", validatorNameAttr: "validator-label" }, e), this.language = $.extend(this.language, e.language), this.options = e, this.$input = t, this.$parent = this.$input.closest(e.parentSelector), this.$feedback = this.$parent.find(e.feedbackSelector), this.$form = this.getForm(this.$input), this.resetStyle(), this.val = this.$input.val(), this.name = this.$input.attr("name"), this.label = this.getLabelByName(this.name) ? this.getLabelByName(this.name) : this.$input.data("validator-label"), this.otherName = null, this.rules = this.first_element(e.rules, this.$input.data("validator")), this.rulesObject = this.first_element(this.getRules(), {}), this.warnings = this.first_element("", this.$input.data("validator-warnings")).split("|"); var a = this.getFirstError(); a ? (this.showError(a), this.$feedback.removeClass(this.options.feedbackSuccessClass).addClass(this.options.feedbackErrorClass), this.$input.removeClass(this.options.inputSuccessClass).addClass(this.options.inputErrorClass), a && this.contains(this.warnings, a) ? this.setStatus("warning") : this.setStatus("error")) : (this.$parent.addClass(this.options.parentSuccessClass), this.$feedback.removeClass(this.options.feedbackErrorClass).addClass(this.options.feedbackSuccessClass), this.$input.removeClass(this.options.inputErrorClass).addClass(this.options.inputSuccessClass)) } return t.prototype.getLabelByName = function (t) { t = t || this.otherName; var e = this.getInput(this.$form, '[name="' + t + '"]').data(this.options.validatorNameAttr); return e ? e.trim() : null }, t.prototype.showMessage = function (t) { void 0 !== this.$feedback.data("html") && this.$feedback.data("html", this.$feedback.html()), this.$feedback.html(t) }, t.prototype.showError = function (t) { var e = this.rulesObject[t]; if (this.label) { var a = { label: this.label }; this.otherName && (a.otherLabel = this.getLabelByName()); for (var r = 0, i = e.length; r < i; r++)a["param" + r] = e[r]; var s = this.getValidator(t, a); this.showMessage(s) } }, t.prototype.setStatus = function (t) { this.$parent.removeClass("has-warning"), this.$parent.removeClass("has-error"), this.$parent.removeClass("has-success"), this.$parent.removeClass("has-loading"), t && this.$parent.addClass("has-" + t) }, t.prototype.resetStyle = function () { this.$feedback.html(this.$feedback.data("html") ? this.$feedback.data("html") : ""), this.setStatus() }, t.prototype.getRules = function () { var t = {}, e = this.rules.split("|"); return $.each(e, function () { var e = this.split(":")[0], a = this.split(":")[1]; t[e] = a ? a.split(",") : [] }), t }, t.prototype.getFirstError = function () { var t = this; if (!this.required() && !this.rulesObject.hasOwnProperty("required")) return this.rulesObject.hasOwnProperty("required_if") && !this.required_if.apply(t, this.rulesObject.required_if) ? "required_if" : null; var e = null; return $.each(this.rulesObject, function (a, r) { if (!t[a].apply(t, r)) return e = a, !1 }), e }, t.prototype.valLength = function (t) { var e = t || this.val; return "string" == typeof e ? e.length : 0 }, t.prototype.getDateTimestamp = function (t) { var e = new Date(t || null); return new Date(e.getFullYear(), e.getMonth(), e.getDate()).getTime() }, t.prototype.required = function () { return 0 !== this.valLength() }, t.prototype.numeric = function () { return parseFloat(this.val) === this.getFloat(this.val) }, t.prototype.integer = function () { return console.log(this.val), parseInt(this.val) === this.getFloat(this.val) }, t.prototype.between_numeric = function (t, e) { var a = this.getFloat(this.val); return t = this.getFloat(t), e = this.getFloat(e), a >= t && a <= e }, t.prototype.max_numeric = function (t) { return this.getFloat(this.val) <= this.getFloat(t) }, t.prototype.min_numeric = function (t) { return this.getFloat(this.val) >= this.getFloat(t) }, t.prototype.size_numeric = function (t) { return this.getFloat(this.val) === this.getFloat(t) }, t.prototype.between = function (t, e) { var a = this.valLength(); return t = this.getInt(t), e = this.getInt(e), a >= t && a <= e }, t.prototype.max = function (t) { return this.valLength() <= this.getInt(t) }, t.prototype.min = function (t) { return this.valLength() >= this.getInt(t) }, t.prototype.size = function (t) { return this.valLength() === this.getInt(t) }, t.prototype.date = function () { return !isNaN(new Date(this.val).getTime()) }, t.prototype.before = function (t) { return new Date(this.val).getTime() < this.getDateTimestamp(t) }, t.prototype.before_or_equal = function (t) { return new Date(this.val).getTime() <= this.getDateTimestamp(t) }, t.prototype.after = function (t) { return new Date(this.val).getTime() > this.getDateTimestamp(t) }, t.prototype.after_or_equal = function (t) { return new Date(this.val).getTime() >= this.getDateTimestamp(t) }, t.prototype.age = function (t) { t = this.getFloat(t); var e = new Date, a = new Date(e.getFullYear() - t, e.getMonth(), e.getDate()); return a = a.getTime(), this.getDateTimestamp(this.val) <= a }, t.prototype.email = function () { return /^(([^<>()[\]\\.,;:\s@\"]+(\.[^<>()[\]\\.,;:\s@\"]+)*)|(\".+\"))@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\])|(([a-zA-Z\-0-9]+\.)+[a-zA-Z]{2,}))$/.test(this.val) }, t.prototype.in = function () { return this.contains(arguments, this.val) }, t.prototype.not_in = function () { return !this.contains(arguments, this.val) }, t.prototype.regex = function (t) { return new RegExp(t).test(this.val) }, t.prototype.different = function (t) { this.otherName = t, this.triggerOtherName(t); var e = this.serializeArrayKv(this.$form)[t]; return this.val !== e }, t.prototype.required_if = function (t) { return this.otherName = t, this.triggerOtherName(t), !this.serializeArrayKv(this.$form)[t] || this.required() }, t.prototype.required_if_val = function (t, e) { this.otherName = t, this.triggerOtherName(t); var a = this.serializeArrayKv(this.$form)[t]; return !this.valLength(e) || a !== e || this.required() }, t.prototype.same = function (t) { return this.otherName = t, this.triggerOtherName(t), !this.different(t) }, t.prototype.url = function () { return new RegExp("^(https?:\\/\\/)?((([a-z\\d]([a-z\\d-]*[a-z\\d])*)\\.)+[a-z]{2,}|((\\d{1,3}\\.){3}\\d{1,3}))(\\:\\d+)?(\\/[-a-z\\d%_.~+&:]*)*(\\?[;&a-z\\d%_.,~+&:=-]*)?(\\#[-a-z\\d_]*)?$", "i").test(this.val) }, t.prototype.triggerOtherName = function (t) { var e = this; e.getInput(this.$form, '[name="' + t + '"]').off("change.validator").on("change.validator", function () { e.$input.trigger("blur") }) }, t.prototype.first_element = function () { for (var t = 0, e = arguments.length; t < e; t++) { var a = arguments[t]; if (!(a instanceof jQuery && 0 === a.length) && null !== a && "" !== a && void 0 !== a) return a } return arguments[0] }, t.prototype.getInt = function (t) { var e = parseInt(t); return isNaN(e) ? 0 : e }, t.prototype.getFloat = function (t) { var e = parseFloat(t); return isNaN(e) ? 0 : e }, t.prototype.getInput = function (t, e) { var a = t.attr("id"); return this.first_element($(e + '[form="' + a + '"]'), t.find(e)) }, t.prototype.getForm = function (t) { return t.attr("form") ? $("form#" + t.attr("form")) : t.closest("form") }, t.prototype.contains = function (t, e) { return -1 !== t.indexOf(e) }, t.prototype.replaceAll = function (t, e, a) { return t.replace(new RegExp(e, "g"), a) }, t.prototype.getValidator = function (t, e) { t = String(t); var a = this.language[t]; return this.parseData(a, e) }, t.prototype.parseData = function (t, e) { var a = this; return $.each(e || {}, function (e, r) { t = a.replaceAll(t, "{" + e + "}", r) }), t }, t.prototype.serializeArrayKv = function (t) { for (var e = t.serializeArray(), a = {}, r = 0; r < e.length; ++r)a[e[r].name] = e[r].value; return a }, t.prototype.language = { numeric: "The {label} must be a number.", integer: "The {label} must be an integer.", between_numeric: "The {label} must be between {param0} and {param1}.", max_numeric: "The {label} may not be greater than {param0}.", min_numeric: "The {label} must be at least {param0}.", size_numeric: "The {label} must be {param0}.", between: "The {label} must be between {param0} and {param1} characters.", max: "The {label} may not be greater than {param0} characters.", min: "The {label} must be at least {param0} characters.", size: "The {label} must be {param0} characters.", date: "The {label} must be a date after {param0}.", before: "The {label} must be a date before {param0}.", before_or_equal: "The {label} must be a date before or equal to {param0}.", after: "The {label} must be a date after {param0}.", after_or_equal: "The {label} must be a date after or equal to {param0}.", age: "The age should be more than {param0}.", email: "The  {label} must be a valid email address.", in: "The selected {label} is invalid.", not_in: "The selected {label} is invalid.", different: "The {label} and {otherLabel} must be different.", required: "The {label} field is required.", required_if: "The {label} field is required when {otherLabel} is filled.", required_if_val: "The {label} field is required when {otherLabel} is {param0}", same: "The {label} and {otherLabel} must match.", url: "The {label} format is invalid.", regex: "The {label} format is invalid." }, t }();

Validator.prototype.numbers_only = function () {
    if (this.val) {
        var digitsOnlyRegex = /^\d+$/gi
        return digitsOnlyRegex.test(this.val);
    }

    return false;
};

Validator.prototype.has_data_property = function (property, value) {
    if ($(this).data(property) !== undefined && $(this).data(property) !== null) {
        return $(this).data(property) == value;
    }

    return false;
};

Validator.prototype.select_between_numeric = function (t, e) {
    var a = this.getFloat(this.val);
    return t = this.getFloat(t), e = this.getFloat(e), a >= t && a <= e;

    return false;
};

Validator.prototype.no_past_month = function (selYear) {
    var selectedmonth = parseInt(this.val);

    var selYear = $("#" + selYear).val();
    if (selYear) {
        var selYear = parseInt(selYear) % 100;
        var nowYear = (new Date()).getFullYear() % 100;
        var nowMonth = (new Date()).getMonth() + 1;
        return
            selYear > nowYear && selectedmonth >= 1 && selectedmonth <= 12 ||
            selYear === nowYear && selectedmonth >= nowMonth && selectedmonth <= 12;
    }
    else {
        return false;
    }
};